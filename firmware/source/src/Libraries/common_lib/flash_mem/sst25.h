#ifndef _SST25_H_
#define _SST25_H_
#include <stdint.h>

#define SST_CS_Assert()			HAL_SPI_CS_ASSERT
#define SST_CS_DeAssert()		HAL_SPI_CS_DEASSERT

#define SECTOR_SIZE	4096

#define FLASH_SIZE_MAX	(8*1024*1024)//8Mbytes
#define TRACKER_DATA_SIZE_MAX	(5*1024*1024)//5Mbytes

#define FIRMWARE_SIZE_MAX (128*1024) //128Kbytes

#define FIRMWARE_FILE_SIZE_ERR		0xAAAAAAAA
#define FIRMWARE_START_ADDR_ERR		0xBBBBBBBB
#define FIRMWARE_END_ADDR_ERR			0xCCCCCCCC
#define FIRMWARE_CRC_ERR					0xDDDDDDDD


#define FIRMWARE_INFO_ADDR 0
#define FIRMWARE_OFFSET_COUNTER_BASE_ADDR	0x00001000
#define FIRMWARE_BASE_ADDR	0x00002000
#define FRIMWARE_MAX_SIZE		0x00020000
#define CFG_SAVE_ADDR					(0x00000000 + FRIMWARE_MAX_SIZE)
#define RESET_CNT_ADDR				(0x00001000 + FRIMWARE_MAX_SIZE)
#define MILEAGE_ADDR					(0x00002000 + FRIMWARE_MAX_SIZE)
#define POWER_STATUS_ADDR			(0x00003000 + FRIMWARE_MAX_SIZE)
#define GPS_LAT_ADDR					(0x00004000 + FRIMWARE_MAX_SIZE)
#define GPS_LON_ADDR					(0x00005000 + FRIMWARE_MAX_SIZE)
#define GPS_HDOP_ADDR					(0x00006000 + FRIMWARE_MAX_SIZE)
#define GPS_DIR_ADDR					(0x00007000 + FRIMWARE_MAX_SIZE)
#define CELL_LAT_ADDR					(0x00008000 + FRIMWARE_MAX_SIZE)
#define CELL_LON_ADDR					(0x00009000 + FRIMWARE_MAX_SIZE)
#define CELL_HDOP_ADDR				(0x0000A000 + FRIMWARE_MAX_SIZE)
#define CELL_DIR_ADDR					(0x0000B000 + FRIMWARE_MAX_SIZE)
#define TIME_SAVE_ADDR				(0x0000C000 + FRIMWARE_MAX_SIZE)
#define TIME_ZONE_ADDR				(0x0000D000 + FRIMWARE_MAX_SIZE)
#define TRACKER_RING_ADDR			(0x0000E000 + FRIMWARE_MAX_SIZE)
#define TRACKER_DATA_ADDR			(0x0000F000 + FRIMWARE_MAX_SIZE)

#define FIRMWARE_STATUS_OFFSET			(1)
#define FIRMWARE_FILE_SIZE_OFFSET		(2)
#define FIRMWARE_CRC_OFFSET					(3)
#define FIRMWARE_START_ADDR_OFFSET	(4)
#define FIRMWARE_ERR_ADDR_OFFSET		(5)



enum SST25_ERASE_MODE {
    all,
    block4k,
    block32k,
    block64k
};

uint8_t SST25_Init(void);
uint8_t SST25_Erase(uint32_t addr, enum SST25_ERASE_MODE mode);
uint8_t SST25_Read(uint32_t addr, uint8_t *buf, uint32_t count);
uint8_t SST25_Write(uint32_t addr, const uint8_t *buf, uint32_t count);
void SPItest1(void);
#endif
